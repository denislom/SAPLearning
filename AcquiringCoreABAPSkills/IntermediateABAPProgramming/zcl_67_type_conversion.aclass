CLASS zcl_67_type_conversion DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_oo_adt_classrun .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_67_type_conversion IMPLEMENTATION.


  METHOD if_oo_adt_classrun~main.

*  SUCCESSFULL ASSIGNMENT

*    DATA var_string TYPE string.
*    DATA var_int TYPE i.
*    DATA var_date TYPE d.
*    DATA var_pack TYPE p LENGTH 3 DECIMALS 2.
*
*
*    var_string = `12345`.
*    var_int = var_string.
*
*
*    out->write( 'Conversion successful' ).
*
*
*    var_string = `20230101`.
*    var_date = var_string.
*
*
*    out->write( |String value: { var_string }| ).
*    out->write( |Date Value: { var_date DATE = USER }| ).

* TRUNCATION AND ROUNDING

*
*DATA long_char TYPE c LENGTH 10.
*DATA short_char TYPE c LENGTH 5.
*
*
*DATA result TYPE p LENGTH 3 DECIMALS 2.
*
*
*long_char = 'ABCDEFGHIJ'.
*short_char = long_char.
*
*
*out->write( long_char ).
*out->write( short_char ).
*
*
*result = 1 / 8.
*out->write( |1 / 8 is rounded to { result NUMBER = USER }| ).

* UNEXPECTED RESULT OF ASSIGNMENT

*DATA var_date TYPE d.
*DATA var_int TYPE i.
*DATA var_string TYPE string.
*DATA var_n TYPE n LENGTH 4.
*
*var_date = cl_abap_context_info=>get_system_date( ).
*var_int = var_date.
*
*out->write( |Date as date| ).
*out->write( var_date ).
*out->write( |Date assigned to integer| ).
*out->write( var_int ).
*
*var_string = `R2D2`.
*var_n = var_string.
*
*out->write( |String| ).
*out->write( var_string ).
*out->write( |String assigned to type N| ).
*out->write( var_n ).

** CONVERSIONS OF FORCED TYPE
*
*
** result has type C.
** and is displayed unformatted in the console
*
*   DATA(result1) = '20230101'.
*   out->write( result1 ).
*
** result2 is forced to have type D
** and is displayed with date formatting in the console
*
*   DATA(result2) = CONV d( '20230101' ).
*   out->write( result2 ).
*
*
*
*
** The method do_something( ) has an importing parameter of type string.
** Attempting to pass var results in a syntax error
** The CONV #( ) expression converts var into the expected type
** Note that CONV #( ) can lead to conversion exceptions
*
*
** lcl_class=>do_something( var ).


      DATA var_date   TYPE d.
      DATA var_pack   TYPE p LENGTH 3 DECIMALS 2.
      DATA var_string TYPE string.
      DATA var_char   TYPE c LENGTH 3.

      var_pack = 1 / 8.
      out->write( |1/8 = { var_pack NUMBER = USER }| ).

      TRY.
          var_pack = EXACT #( 1 / 8 ).
        CATCH cx_sy_conversion_error.
          out->write( |1/8 has to be rounded. EXACT triggered an exception| ).
      ENDTRY.

      var_string = 'ABCDE'.
      var_char   = var_string.
      out->write( var_char ).

      TRY.
          var_char = EXACT #( var_string ).
        CATCH cx_sy_conversion_error.
          out->write( 'String has to be truncated. EXACT triggered an exception' ).
      ENDTRY.

      var_date = 'ABCDEFGH'.
      out->write( var_Date ).

      TRY.
          var_date = EXACT #( 'ABCDEFGH' ).
        CATCH cx_sy_conversion_error.
          out->write( |ABCDEFGH is not a valid date. EXACT triggered an exception| ).
      ENDTRY.


      var_date = '20221232'.
      out->write( var_date ).


      TRY.
          var_date = EXACT #( '20221232' ).
        CATCH cx_sy_conversion_error.
          out->write( |2022-12-32 is not a valid date. EXACT triggered an exception| ).
      ENDTRY.


  ENDMETHOD.
ENDCLASS.